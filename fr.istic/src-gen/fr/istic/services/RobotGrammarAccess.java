/*
 * generated by Xtext 2.34.0
 */
package fr.istic.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RobotGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFunctionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFunctionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFunctionRFunctionParserRuleCall_3_2_0 = (RuleCall)cFunctionAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFunctionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFunctionRFunctionParserRuleCall_3_3_1_0 = (RuleCall)cFunctionAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program returns Program:
		//    {Program}
		//    'Program'
		//    '{'
		//        ('function' '{' function+=RFunction ( "," function+=RFunction)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//'Program'
		//'{'
		//    ('function' '{' function+=RFunction ( "," function+=RFunction)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'Program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('function' '{' function+=RFunction ( "," function+=RFunction)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'function'
		public Keyword getFunctionKeyword_3_0() { return cFunctionKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//function+=RFunction
		public Assignment getFunctionAssignment_3_2() { return cFunctionAssignment_3_2; }
		
		//RFunction
		public RuleCall getFunctionRFunctionParserRuleCall_3_2_0() { return cFunctionRFunctionParserRuleCall_3_2_0; }
		
		//( "," function+=RFunction)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//function+=RFunction
		public Assignment getFunctionAssignment_3_3_1() { return cFunctionAssignment_3_3_1; }
		
		//RFunction
		public RuleCall getFunctionRFunctionParserRuleCall_3_3_1_0() { return cFunctionRFunctionParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForwardParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCallFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVarParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCallVarParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEqualsParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cGreaterParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLesserParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAddParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMinusParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cMulParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDivParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDistanceParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cBackwardParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cLeftParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cRightParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cDistanceSensorParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cTimeSensorParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cConditionParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cLoopParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cORParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cANDParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cNOTParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cTRUEParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cFALSEParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		
		//Statement returns Statement:
		//    Block | Forward | Clock | CallFunction | Var | CallVar | Const | Equals | Greater | Lesser | Add | Minus | Mul | Div | Distance | Backward | Left | Right | DistanceSensor | TimeSensor | Condition | Loop | OR | AND | NOT | TRUE | FALSE;
		@Override public ParserRule getRule() { return rule; }
		
		//Block | Forward | Clock | CallFunction | Var | CallVar | Const | Equals | Greater | Lesser | Add | Minus | Mul | Div | Distance | Backward | Left | Right | DistanceSensor | TimeSensor | Condition | Loop | OR | AND | NOT | TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }
		
		//Forward
		public RuleCall getForwardParserRuleCall_1() { return cForwardParserRuleCall_1; }
		
		//Clock
		public RuleCall getClockParserRuleCall_2() { return cClockParserRuleCall_2; }
		
		//CallFunction
		public RuleCall getCallFunctionParserRuleCall_3() { return cCallFunctionParserRuleCall_3; }
		
		//Var
		public RuleCall getVarParserRuleCall_4() { return cVarParserRuleCall_4; }
		
		//CallVar
		public RuleCall getCallVarParserRuleCall_5() { return cCallVarParserRuleCall_5; }
		
		//Const
		public RuleCall getConstParserRuleCall_6() { return cConstParserRuleCall_6; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_7() { return cEqualsParserRuleCall_7; }
		
		//Greater
		public RuleCall getGreaterParserRuleCall_8() { return cGreaterParserRuleCall_8; }
		
		//Lesser
		public RuleCall getLesserParserRuleCall_9() { return cLesserParserRuleCall_9; }
		
		//Add
		public RuleCall getAddParserRuleCall_10() { return cAddParserRuleCall_10; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_11() { return cMinusParserRuleCall_11; }
		
		//Mul
		public RuleCall getMulParserRuleCall_12() { return cMulParserRuleCall_12; }
		
		//Div
		public RuleCall getDivParserRuleCall_13() { return cDivParserRuleCall_13; }
		
		//Distance
		public RuleCall getDistanceParserRuleCall_14() { return cDistanceParserRuleCall_14; }
		
		//Backward
		public RuleCall getBackwardParserRuleCall_15() { return cBackwardParserRuleCall_15; }
		
		//Left
		public RuleCall getLeftParserRuleCall_16() { return cLeftParserRuleCall_16; }
		
		//Right
		public RuleCall getRightParserRuleCall_17() { return cRightParserRuleCall_17; }
		
		//DistanceSensor
		public RuleCall getDistanceSensorParserRuleCall_18() { return cDistanceSensorParserRuleCall_18; }
		
		//TimeSensor
		public RuleCall getTimeSensorParserRuleCall_19() { return cTimeSensorParserRuleCall_19; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_20() { return cConditionParserRuleCall_20; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_21() { return cLoopParserRuleCall_21; }
		
		//OR
		public RuleCall getORParserRuleCall_22() { return cORParserRuleCall_22; }
		
		//AND
		public RuleCall getANDParserRuleCall_23() { return cANDParserRuleCall_23; }
		
		//NOT
		public RuleCall getNOTParserRuleCall_24() { return cNOTParserRuleCall_24; }
		
		//TRUE
		public RuleCall getTRUEParserRuleCall_25() { return cTRUEParserRuleCall_25; }
		
		//FALSE
		public RuleCall getFALSEParserRuleCall_26() { return cFALSEParserRuleCall_26; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCallVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEqualsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGreaterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLesserParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAddParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMinusParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMulParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDivParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDistanceParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDistanceSensorParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cTimeSensorParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cORParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cANDParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cNOTParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cTRUEParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cFALSEParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//Expression returns Expression:
		//    CallFunction | CallVar | Const | Equals | Greater | Lesser | Add | Minus | Mul | Div | Distance | DistanceSensor | TimeSensor | OR | AND | NOT | TRUE | FALSE;
		@Override public ParserRule getRule() { return rule; }
		
		//CallFunction | CallVar | Const | Equals | Greater | Lesser | Add | Minus | Mul | Div | Distance | DistanceSensor | TimeSensor | OR | AND | NOT | TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CallFunction
		public RuleCall getCallFunctionParserRuleCall_0() { return cCallFunctionParserRuleCall_0; }
		
		//CallVar
		public RuleCall getCallVarParserRuleCall_1() { return cCallVarParserRuleCall_1; }
		
		//Const
		public RuleCall getConstParserRuleCall_2() { return cConstParserRuleCall_2; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_3() { return cEqualsParserRuleCall_3; }
		
		//Greater
		public RuleCall getGreaterParserRuleCall_4() { return cGreaterParserRuleCall_4; }
		
		//Lesser
		public RuleCall getLesserParserRuleCall_5() { return cLesserParserRuleCall_5; }
		
		//Add
		public RuleCall getAddParserRuleCall_6() { return cAddParserRuleCall_6; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_7() { return cMinusParserRuleCall_7; }
		
		//Mul
		public RuleCall getMulParserRuleCall_8() { return cMulParserRuleCall_8; }
		
		//Div
		public RuleCall getDivParserRuleCall_9() { return cDivParserRuleCall_9; }
		
		//Distance
		public RuleCall getDistanceParserRuleCall_10() { return cDistanceParserRuleCall_10; }
		
		//DistanceSensor
		public RuleCall getDistanceSensorParserRuleCall_11() { return cDistanceSensorParserRuleCall_11; }
		
		//TimeSensor
		public RuleCall getTimeSensorParserRuleCall_12() { return cTimeSensorParserRuleCall_12; }
		
		//OR
		public RuleCall getORParserRuleCall_13() { return cORParserRuleCall_13; }
		
		//AND
		public RuleCall getANDParserRuleCall_14() { return cANDParserRuleCall_14; }
		
		//NOT
		public RuleCall getNOTParserRuleCall_15() { return cNOTParserRuleCall_15; }
		
		//TRUE
		public RuleCall getTRUEParserRuleCall_16() { return cTRUEParserRuleCall_16; }
		
		//FALSE
		public RuleCall getFALSEParserRuleCall_17() { return cFALSEParserRuleCall_17; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Unit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCmParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMmParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Unit returns Unit:
		//    Cm | Mm;
		@Override public ParserRule getRule() { return rule; }
		
		//Cm | Mm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Cm
		public RuleCall getCmParserRuleCall_0() { return cCmParserRuleCall_0; }
		
		//Mm
		public RuleCall getMmParserRuleCall_1() { return cMmParserRuleCall_1; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cORParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNOTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTRUEParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFALSEParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BooleanExpression returns BooleanExpression:
		//    OR | AND | NOT | TRUE | FALSE;
		@Override public ParserRule getRule() { return rule; }
		
		//OR | AND | NOT | TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OR
		public RuleCall getORParserRuleCall_0() { return cORParserRuleCall_0; }
		
		//AND
		public RuleCall getANDParserRuleCall_1() { return cANDParserRuleCall_1; }
		
		//NOT
		public RuleCall getNOTParserRuleCall_2() { return cNOTParserRuleCall_2; }
		
		//TRUE
		public RuleCall getTRUEParserRuleCall_3() { return cTRUEParserRuleCall_3; }
		
		//FALSE
		public RuleCall getFALSEParserRuleCall_4() { return cFALSEParserRuleCall_4; }
	}
	public class RFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.RFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFunctionidentifierKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFunctionidentifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionidentifierFunctionIdentifierParserRuleCall_3_0 = (RuleCall)cFunctionidentifierAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBlockKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBlockAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_4_2_0 = (RuleCall)cBlockAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cBlockAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_4_3_1_0 = (RuleCall)cBlockAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RFunction returns RFunction:
		//    'RFunction'
		//    '{'
		//        'functionidentifier' functionidentifier=FunctionIdentifier
		//        ('block' '{' block+=Block ( "," block+=Block)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'RFunction'
		//'{'
		//    'functionidentifier' functionidentifier=FunctionIdentifier
		//    ('block' '{' block+=Block ( "," block+=Block)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'RFunction'
		public Keyword getRFunctionKeyword_0() { return cRFunctionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'functionidentifier'
		public Keyword getFunctionidentifierKeyword_2() { return cFunctionidentifierKeyword_2; }
		
		//functionidentifier=FunctionIdentifier
		public Assignment getFunctionidentifierAssignment_3() { return cFunctionidentifierAssignment_3; }
		
		//FunctionIdentifier
		public RuleCall getFunctionidentifierFunctionIdentifierParserRuleCall_3_0() { return cFunctionidentifierFunctionIdentifierParserRuleCall_3_0; }
		
		//('block' '{' block+=Block ( "," block+=Block)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'block'
		public Keyword getBlockKeyword_4_0() { return cBlockKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//block+=Block
		public Assignment getBlockAssignment_4_2() { return cBlockAssignment_4_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_2_0() { return cBlockBlockParserRuleCall_4_2_0; }
		
		//( "," block+=Block)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//block+=Block
		public Assignment getBlockAssignment_4_3_1() { return cBlockAssignment_4_3_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_3_1_0() { return cBlockBlockParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FunctionIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.FunctionIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionIdentifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FunctionIdentifier returns FunctionIdentifier:
		//    {FunctionIdentifier}
		//    'FunctionIdentifier'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionIdentifier}
		//'FunctionIdentifier'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{FunctionIdentifier}
		public Action getFunctionIdentifierAction_0() { return cFunctionIdentifierAction_0; }
		
		//'FunctionIdentifier'
		public Keyword getFunctionIdentifierKeyword_1() { return cFunctionIdentifierKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBlockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStatementKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStatementAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_3_2_0 = (RuleCall)cStatementAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cStatementAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_3_3_1_0 = (RuleCall)cStatementAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Block returns Block:
		//    {Block}
		//    'Block'
		//    '{'
		//        ('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block}
		//'Block'
		//'{'
		//    ('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'Block'
		public Keyword getBlockKeyword_1() { return cBlockKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'statement'
		public Keyword getStatementKeyword_3_0() { return cStatementKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_3_2() { return cStatementAssignment_3_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_2_0() { return cStatementStatementParserRuleCall_3_2_0; }
		
		//( "," statement+=Statement)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//statement+=Statement
		public Assignment getStatementAssignment_3_3_1() { return cStatementAssignment_3_3_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_3_1_0() { return cStatementStatementParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistanceDistanceParserRuleCall_3_0 = (RuleCall)cDistanceAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Forward returns Forward:
		//    'Forward'
		//    '{'
		//        'distance' distance=Distance
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Forward'
		//'{'
		//    'distance' distance=Distance
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Forward'
		public Keyword getForwardKeyword_0() { return cForwardKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//distance=Distance
		public Assignment getDistanceAssignment_3() { return cDistanceAssignment_3; }
		
		//Distance
		public RuleCall getDistanceDistanceParserRuleCall_3_0() { return cDistanceDistanceParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Clock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAngleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAngleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAngleEIntParserRuleCall_3_1_0 = (RuleCall)cAngleAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Clock returns Clock:
		//    {Clock}
		//    'Clock'
		//    '{'
		//        ('angle' angle=EInt)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Clock}
		//'Clock'
		//'{'
		//    ('angle' angle=EInt)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Clock}
		public Action getClockAction_0() { return cClockAction_0; }
		
		//'Clock'
		public Keyword getClockKeyword_1() { return cClockKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('angle' angle=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'angle'
		public Keyword getAngleKeyword_3_0() { return cAngleKeyword_3_0; }
		
		//angle=EInt
		public Assignment getAngleAssignment_3_1() { return cAngleAssignment_3_1; }
		
		//EInt
		public RuleCall getAngleEIntParserRuleCall_3_1_0() { return cAngleEIntParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CallFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.CallFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFunctionidentifierKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFunctionidentifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFunctionidentifierFunctionIdentifierCrossReference_3_0 = (CrossReference)cFunctionidentifierAssignment_3.eContents().get(0);
		private final RuleCall cFunctionidentifierFunctionIdentifierEStringParserRuleCall_3_0_1 = (RuleCall)cFunctionidentifierFunctionIdentifierCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParametersExpressionParserRuleCall_4_2_0 = (RuleCall)cParametersAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_4_3_1_0 = (RuleCall)cParametersAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CallFunction returns CallFunction:
		//    'CallFunction'
		//    '{'
		//        'functionidentifier' functionidentifier=[FunctionIdentifier|EString]
		//        ('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CallFunction'
		//'{'
		//    'functionidentifier' functionidentifier=[FunctionIdentifier|EString]
		//    ('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'CallFunction'
		public Keyword getCallFunctionKeyword_0() { return cCallFunctionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'functionidentifier'
		public Keyword getFunctionidentifierKeyword_2() { return cFunctionidentifierKeyword_2; }
		
		//functionidentifier=[FunctionIdentifier|EString]
		public Assignment getFunctionidentifierAssignment_3() { return cFunctionidentifierAssignment_3; }
		
		//[FunctionIdentifier|EString]
		public CrossReference getFunctionidentifierFunctionIdentifierCrossReference_3_0() { return cFunctionidentifierFunctionIdentifierCrossReference_3_0; }
		
		//EString
		public RuleCall getFunctionidentifierFunctionIdentifierEStringParserRuleCall_3_0_1() { return cFunctionidentifierFunctionIdentifierEStringParserRuleCall_3_0_1; }
		
		//('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameters'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_4_2_0() { return cParametersExpressionParserRuleCall_4_2_0; }
		
		//( "," parameters+=Expression)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//parameters+=Expression
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }
		
		//Expression
		public RuleCall getParametersExpressionParserRuleCall_4_3_1_0() { return cParametersExpressionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVaridentifierKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVaridentifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVaridentifierVarIdentifierParserRuleCall_3_0 = (RuleCall)cVaridentifierAssignment_3.eContents().get(0);
		private final Keyword cExpressionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Var returns Var:
		//    'Var'
		//    '{'
		//        'varidentifier' varidentifier=VarIdentifier
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Var'
		//'{'
		//    'varidentifier' varidentifier=VarIdentifier
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'varidentifier'
		public Keyword getVaridentifierKeyword_2() { return cVaridentifierKeyword_2; }
		
		//varidentifier=VarIdentifier
		public Assignment getVaridentifierAssignment_3() { return cVaridentifierAssignment_3; }
		
		//VarIdentifier
		public RuleCall getVaridentifierVarIdentifierParserRuleCall_3_0() { return cVaridentifierVarIdentifierParserRuleCall_3_0; }
		
		//'expression'
		public Keyword getExpressionKeyword_4() { return cExpressionKeyword_4; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0() { return cExpressionExpressionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class CallVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.CallVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVaridentifierKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVaridentifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVaridentifierVarIdentifierCrossReference_3_0 = (CrossReference)cVaridentifierAssignment_3.eContents().get(0);
		private final RuleCall cVaridentifierVarIdentifierEStringParserRuleCall_3_0_1 = (RuleCall)cVaridentifierVarIdentifierCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CallVar returns CallVar:
		//    'CallVar'
		//    '{'
		//        'varidentifier' varidentifier=[VarIdentifier|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CallVar'
		//'{'
		//    'varidentifier' varidentifier=[VarIdentifier|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'CallVar'
		public Keyword getCallVarKeyword_0() { return cCallVarKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'varidentifier'
		public Keyword getVaridentifierKeyword_2() { return cVaridentifierKeyword_2; }
		
		//varidentifier=[VarIdentifier|EString]
		public Assignment getVaridentifierAssignment_3() { return cVaridentifierAssignment_3; }
		
		//[VarIdentifier|EString]
		public CrossReference getVaridentifierVarIdentifierCrossReference_3_0() { return cVaridentifierVarIdentifierCrossReference_3_0; }
		
		//EString
		public RuleCall getVaridentifierVarIdentifierEStringParserRuleCall_3_0_1() { return cVaridentifierVarIdentifierEStringParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Const returns Const:
		//    {Const}
		//    'Const'
		//    '{'
		//        ('value' value=EInt)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Const}
		//'Const'
		//'{'
		//    ('value' value=EInt)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Const}
		public Action getConstAction_0() { return cConstAction_0; }
		
		//'Const'
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EInt
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_3_1_0() { return cValueEIntParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Equals returns Equals:
		//    'Equals'
		//    '{'
		//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Equals'
		//'{'
		//    'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Equals'
		public Keyword getEqualsKeyword_0() { return cEqualsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class GreaterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Greater");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Greater returns Greater:
		//    'Greater'
		//    '{'
		//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Greater'
		//'{'
		//    'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Greater'
		public Keyword getGreaterKeyword_0() { return cGreaterKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LesserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Lesser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLesserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Lesser returns Lesser:
		//    'Lesser'
		//    '{'
		//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Lesser'
		//'{'
		//    'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Lesser'
		public Keyword getLesserKeyword_0() { return cLesserKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Add returns Add:
		//    'Add'
		//    '{'
		//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Add'
		//'{'
		//    'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Minus returns Minus:
		//    'Minus'
		//    '{'
		//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Minus'
		//'{'
		//    'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Minus'
		public Keyword getMinusKeyword_0() { return cMinusKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class MulElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Mul");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMulKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Mul returns Mul:
		//    'Mul'
		//    '{'
		//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mul'
		//'{'
		//    'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Mul'
		public Keyword getMulKeyword_0() { return cMulKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDivKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Div returns Div:
		//    'Div'
		//    '{'
		//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Div'
		//'{'
		//    'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Div'
		public Keyword getDivKeyword_0() { return cDivKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expression'
		public Keyword getExpressionKeyword_2() { return cExpressionKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//( "," expression+=Expression)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_5_1() { return cExpressionAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_0() { return cExpressionExpressionParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Distance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDistanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cValeurKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValeurAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValeurEIntParserRuleCall_2_1_0 = (RuleCall)cValeurAssignment_2_1.eContents().get(0);
		private final Keyword cUnitKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitUnitParserRuleCall_4_0 = (RuleCall)cUnitAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Distance returns Distance:
		//    'Distance'
		//    '{'
		//        ('valeur' valeur=EInt)?
		//        'unit' unit=Unit
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Distance'
		//'{'
		//    ('valeur' valeur=EInt)?
		//    'unit' unit=Unit
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Distance'
		public Keyword getDistanceKeyword_0() { return cDistanceKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('valeur' valeur=EInt)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'valeur'
		public Keyword getValeurKeyword_2_0() { return cValeurKeyword_2_0; }
		
		//valeur=EInt
		public Assignment getValeurAssignment_2_1() { return cValeurAssignment_2_1; }
		
		//EInt
		public RuleCall getValeurEIntParserRuleCall_2_1_0() { return cValeurEIntParserRuleCall_2_1_0; }
		
		//'unit'
		public Keyword getUnitKeyword_3() { return cUnitKeyword_3; }
		
		//unit=Unit
		public Assignment getUnitAssignment_4() { return cUnitAssignment_4; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_4_0() { return cUnitUnitParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BackwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Backward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackwardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistanceDistanceParserRuleCall_3_0 = (RuleCall)cDistanceAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Backward returns Backward:
		//    'Backward'
		//    '{'
		//        'distance' distance=Distance
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Backward'
		//'{'
		//    'distance' distance=Distance
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Backward'
		public Keyword getBackwardKeyword_0() { return cBackwardKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//distance=Distance
		public Assignment getDistanceAssignment_3() { return cDistanceAssignment_3; }
		
		//Distance
		public RuleCall getDistanceDistanceParserRuleCall_3_0() { return cDistanceDistanceParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistanceDistanceParserRuleCall_3_0 = (RuleCall)cDistanceAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Left returns Left:
		//    'Left'
		//    '{'
		//        'distance' distance=Distance
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Left'
		//'{'
		//    'distance' distance=Distance
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//distance=Distance
		public Assignment getDistanceAssignment_3() { return cDistanceAssignment_3; }
		
		//Distance
		public RuleCall getDistanceDistanceParserRuleCall_3_0() { return cDistanceDistanceParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistanceDistanceParserRuleCall_3_0 = (RuleCall)cDistanceAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Right returns Right:
		//    'Right'
		//    '{'
		//        'distance' distance=Distance
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Right'
		//'{'
		//    'distance' distance=Distance
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Right'
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//distance=Distance
		public Assignment getDistanceAssignment_3() { return cDistanceAssignment_3; }
		
		//Distance
		public RuleCall getDistanceDistanceParserRuleCall_3_0() { return cDistanceDistanceParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DistanceSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.DistanceSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDistanceSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistanceDistanceParserRuleCall_3_0 = (RuleCall)cDistanceAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DistanceSensor returns DistanceSensor:
		//    'DistanceSensor'
		//    '{'
		//        'distance' distance=Distance
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DistanceSensor'
		//'{'
		//    'distance' distance=Distance
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DistanceSensor'
		public Keyword getDistanceSensorKeyword_0() { return cDistanceSensorKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//distance=Distance
		public Assignment getDistanceAssignment_3() { return cDistanceAssignment_3; }
		
		//Distance
		public RuleCall getDistanceDistanceParserRuleCall_3_0() { return cDistanceDistanceParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TimeSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.TimeSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCurrentMillisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCurrentMillisAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCurrentMillisEIntParserRuleCall_3_1_0 = (RuleCall)cCurrentMillisAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TimeSensor returns TimeSensor:
		//    {TimeSensor}
		//    'TimeSensor'
		//    '{'
		//        ('CurrentMillis' CurrentMillis=EInt)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TimeSensor}
		//'TimeSensor'
		//'{'
		//    ('CurrentMillis' CurrentMillis=EInt)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{TimeSensor}
		public Action getTimeSensorAction_0() { return cTimeSensorAction_0; }
		
		//'TimeSensor'
		public Keyword getTimeSensorKeyword_1() { return cTimeSensorKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('CurrentMillis' CurrentMillis=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'CurrentMillis'
		public Keyword getCurrentMillisKeyword_3_0() { return cCurrentMillisKeyword_3_0; }
		
		//CurrentMillis=EInt
		public Assignment getCurrentMillisAssignment_3_1() { return cCurrentMillisAssignment_3_1; }
		
		//EInt
		public RuleCall getCurrentMillisEIntParserRuleCall_3_1_0() { return cCurrentMillisEIntParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionBooleanExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenStatementParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Condition returns Condition:
		//    'Condition'
		//    '{'
		//        'Condition' Condition=BooleanExpression
		//        'then' then=Statement
		//        ('else' else=Statement)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition'
		//'{'
		//    'Condition' Condition=BooleanExpression
		//    'then' then=Statement
		//    ('else' else=Statement)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Condition'
		public Keyword getConditionKeyword_2() { return cConditionKeyword_2; }
		
		//Condition=BooleanExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//BooleanExpression
		public RuleCall getConditionBooleanExpressionParserRuleCall_3_0() { return cConditionBooleanExpressionParserRuleCall_3_0; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//then=Statement
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }
		
		//Statement
		public RuleCall getThenStatementParserRuleCall_5_0() { return cThenStatementParserRuleCall_5_0; }
		
		//('else' else=Statement)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//else=Statement
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }
		
		//Statement
		public RuleCall getElseStatementParserRuleCall_6_1_0() { return cElseStatementParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConditionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionBooleanExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cStatementKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Loop returns Loop:
		//    'Loop'
		//    '{'
		//        'Condition' Condition=BooleanExpression
		//        'statement' statement=Statement
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Loop'
		//'{'
		//    'Condition' Condition=BooleanExpression
		//    'statement' statement=Statement
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'Condition'
		public Keyword getConditionKeyword_2() { return cConditionKeyword_2; }
		
		//Condition=BooleanExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//BooleanExpression
		public RuleCall getConditionBooleanExpressionParserRuleCall_3_0() { return cConditionBooleanExpressionParserRuleCall_3_0; }
		
		//'statement'
		public Keyword getStatementKeyword_4() { return cStatementKeyword_4; }
		
		//statement=Statement
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_5_0() { return cStatementStatementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.OR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cORAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cORKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OR returns OR:
		//    {OR}
		//    'OR'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{OR}
		//'OR'
		public Group getGroup() { return cGroup; }
		
		//{OR}
		public Action getORAction_0() { return cORAction_0; }
		
		//'OR'
		public Keyword getORKeyword_1() { return cORKeyword_1; }
	}
	public class ANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.AND");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cANDAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cANDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//AND returns AND:
		//    {AND}
		//    'AND'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{AND}
		//'AND'
		public Group getGroup() { return cGroup; }
		
		//{AND}
		public Action getANDAction_0() { return cANDAction_0; }
		
		//'AND'
		public Keyword getANDKeyword_1() { return cANDKeyword_1; }
	}
	public class NOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.NOT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNOTAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NOT returns NOT:
		//    {NOT}
		//    'NOT'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{NOT}
		//'NOT'
		public Group getGroup() { return cGroup; }
		
		//{NOT}
		public Action getNOTAction_0() { return cNOTAction_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_1() { return cNOTKeyword_1; }
	}
	public class TRUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.TRUE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTRUEAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTRUEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TRUE returns TRUE:
		//    {TRUE}
		//    'TRUE'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TRUE}
		//'TRUE'
		public Group getGroup() { return cGroup; }
		
		//{TRUE}
		public Action getTRUEAction_0() { return cTRUEAction_0; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_1() { return cTRUEKeyword_1; }
	}
	public class FALSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.FALSE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFALSEAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFALSEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FALSE returns FALSE:
		//    {FALSE}
		//    'FALSE'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{FALSE}
		//'FALSE'
		public Group getGroup() { return cGroup; }
		
		//{FALSE}
		public Action getFALSEAction_0() { return cFALSEAction_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_1() { return cFALSEKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class VarIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.VarIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarIdentifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//VarIdentifier returns VarIdentifier:
		//    {VarIdentifier}
		//    'VarIdentifier'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{VarIdentifier}
		//'VarIdentifier'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{VarIdentifier}
		public Action getVarIdentifierAction_0() { return cVarIdentifierAction_0; }
		
		//'VarIdentifier'
		public Keyword getVarIdentifierKeyword_1() { return cVarIdentifierKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class CmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Cm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCmAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Cm returns Cm:
		//    {Cm}
		//    'Cm'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Cm}
		//'Cm'
		public Group getGroup() { return cGroup; }
		
		//{Cm}
		public Action getCmAction_0() { return cCmAction_0; }
		
		//'Cm'
		public Keyword getCmKeyword_1() { return cCmKeyword_1; }
	}
	public class MmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.istic.Robot.Mm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMmAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Mm returns Mm:
		//    {Mm}
		//    'Mm'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Mm}
		//'Mm'
		public Group getGroup() { return cGroup; }
		
		//{Mm}
		public Action getMmAction_0() { return cMmAction_0; }
		
		//'Mm'
		public Keyword getMmKeyword_1() { return cMmKeyword_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final UnitElements pUnit;
	private final BooleanExpressionElements pBooleanExpression;
	private final RFunctionElements pRFunction;
	private final FunctionIdentifierElements pFunctionIdentifier;
	private final BlockElements pBlock;
	private final EStringElements pEString;
	private final ForwardElements pForward;
	private final ClockElements pClock;
	private final CallFunctionElements pCallFunction;
	private final VarElements pVar;
	private final CallVarElements pCallVar;
	private final ConstElements pConst;
	private final EqualsElements pEquals;
	private final GreaterElements pGreater;
	private final LesserElements pLesser;
	private final AddElements pAdd;
	private final MinusElements pMinus;
	private final MulElements pMul;
	private final DivElements pDiv;
	private final DistanceElements pDistance;
	private final BackwardElements pBackward;
	private final LeftElements pLeft;
	private final RightElements pRight;
	private final DistanceSensorElements pDistanceSensor;
	private final TimeSensorElements pTimeSensor;
	private final ConditionElements pCondition;
	private final LoopElements pLoop;
	private final ORElements pOR;
	private final ANDElements pAND;
	private final NOTElements pNOT;
	private final TRUEElements pTRUE;
	private final FALSEElements pFALSE;
	private final EIntElements pEInt;
	private final VarIdentifierElements pVarIdentifier;
	private final CmElements pCm;
	private final MmElements pMm;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pUnit = new UnitElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pRFunction = new RFunctionElements();
		this.pFunctionIdentifier = new FunctionIdentifierElements();
		this.pBlock = new BlockElements();
		this.pEString = new EStringElements();
		this.pForward = new ForwardElements();
		this.pClock = new ClockElements();
		this.pCallFunction = new CallFunctionElements();
		this.pVar = new VarElements();
		this.pCallVar = new CallVarElements();
		this.pConst = new ConstElements();
		this.pEquals = new EqualsElements();
		this.pGreater = new GreaterElements();
		this.pLesser = new LesserElements();
		this.pAdd = new AddElements();
		this.pMinus = new MinusElements();
		this.pMul = new MulElements();
		this.pDiv = new DivElements();
		this.pDistance = new DistanceElements();
		this.pBackward = new BackwardElements();
		this.pLeft = new LeftElements();
		this.pRight = new RightElements();
		this.pDistanceSensor = new DistanceSensorElements();
		this.pTimeSensor = new TimeSensorElements();
		this.pCondition = new ConditionElements();
		this.pLoop = new LoopElements();
		this.pOR = new ORElements();
		this.pAND = new ANDElements();
		this.pNOT = new NOTElements();
		this.pTRUE = new TRUEElements();
		this.pFALSE = new FALSEElements();
		this.pEInt = new EIntElements();
		this.pVarIdentifier = new VarIdentifierElements();
		this.pCm = new CmElements();
		this.pMm = new MmElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.istic.Robot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    {Program}
	//    'Program'
	//    '{'
	//        ('function' '{' function+=RFunction ( "," function+=RFunction)* '}' )?
	//    '}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement returns Statement:
	//    Block | Forward | Clock | CallFunction | Var | CallVar | Const | Equals | Greater | Lesser | Add | Minus | Mul | Div | Distance | Backward | Left | Right | DistanceSensor | TimeSensor | Condition | Loop | OR | AND | NOT | TRUE | FALSE;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression returns Expression:
	//    CallFunction | CallVar | Const | Equals | Greater | Lesser | Add | Minus | Mul | Div | Distance | DistanceSensor | TimeSensor | OR | AND | NOT | TRUE | FALSE;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Unit returns Unit:
	//    Cm | Mm;
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//BooleanExpression returns BooleanExpression:
	//    OR | AND | NOT | TRUE | FALSE;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//RFunction returns RFunction:
	//    'RFunction'
	//    '{'
	//        'functionidentifier' functionidentifier=FunctionIdentifier
	//        ('block' '{' block+=Block ( "," block+=Block)* '}' )?
	//    '}';
	public RFunctionElements getRFunctionAccess() {
		return pRFunction;
	}
	
	public ParserRule getRFunctionRule() {
		return getRFunctionAccess().getRule();
	}
	
	//FunctionIdentifier returns FunctionIdentifier:
	//    {FunctionIdentifier}
	//    'FunctionIdentifier'
	//    name=EString;
	public FunctionIdentifierElements getFunctionIdentifierAccess() {
		return pFunctionIdentifier;
	}
	
	public ParserRule getFunctionIdentifierRule() {
		return getFunctionIdentifierAccess().getRule();
	}
	
	//Block returns Block:
	//    {Block}
	//    'Block'
	//    '{'
	//        ('statement' '{' statement+=Statement ( "," statement+=Statement)* '}' )?
	//    '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Forward returns Forward:
	//    'Forward'
	//    '{'
	//        'distance' distance=Distance
	//    '}';
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//Clock returns Clock:
	//    {Clock}
	//    'Clock'
	//    '{'
	//        ('angle' angle=EInt)?
	//    '}';
	public ClockElements getClockAccess() {
		return pClock;
	}
	
	public ParserRule getClockRule() {
		return getClockAccess().getRule();
	}
	
	//CallFunction returns CallFunction:
	//    'CallFunction'
	//    '{'
	//        'functionidentifier' functionidentifier=[FunctionIdentifier|EString]
	//        ('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
	//    '}';
	public CallFunctionElements getCallFunctionAccess() {
		return pCallFunction;
	}
	
	public ParserRule getCallFunctionRule() {
		return getCallFunctionAccess().getRule();
	}
	
	//Var returns Var:
	//    'Var'
	//    '{'
	//        'varidentifier' varidentifier=VarIdentifier
	//        'expression' expression=Expression
	//    '}';
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//CallVar returns CallVar:
	//    'CallVar'
	//    '{'
	//        'varidentifier' varidentifier=[VarIdentifier|EString]
	//    '}';
	public CallVarElements getCallVarAccess() {
		return pCallVar;
	}
	
	public ParserRule getCallVarRule() {
		return getCallVarAccess().getRule();
	}
	
	//Const returns Const:
	//    {Const}
	//    'Const'
	//    '{'
	//        ('value' value=EInt)?
	//    '}';
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//Equals returns Equals:
	//    'Equals'
	//    '{'
	//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
	//    '}';
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}
	
	//Greater returns Greater:
	//    'Greater'
	//    '{'
	//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
	//    '}';
	public GreaterElements getGreaterAccess() {
		return pGreater;
	}
	
	public ParserRule getGreaterRule() {
		return getGreaterAccess().getRule();
	}
	
	//Lesser returns Lesser:
	//    'Lesser'
	//    '{'
	//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
	//    '}';
	public LesserElements getLesserAccess() {
		return pLesser;
	}
	
	public ParserRule getLesserRule() {
		return getLesserAccess().getRule();
	}
	
	//Add returns Add:
	//    'Add'
	//    '{'
	//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
	//    '}';
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Minus returns Minus:
	//    'Minus'
	//    '{'
	//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
	//    '}';
	public MinusElements getMinusAccess() {
		return pMinus;
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}
	
	//Mul returns Mul:
	//    'Mul'
	//    '{'
	//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
	//    '}';
	public MulElements getMulAccess() {
		return pMul;
	}
	
	public ParserRule getMulRule() {
		return getMulAccess().getRule();
	}
	
	//Div returns Div:
	//    'Div'
	//    '{'
	//        'expression' '{' expression+=Expression ( "," expression+=Expression)* '}'
	//    '}';
	public DivElements getDivAccess() {
		return pDiv;
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}
	
	//Distance returns Distance:
	//    'Distance'
	//    '{'
	//        ('valeur' valeur=EInt)?
	//        'unit' unit=Unit
	//    '}';
	public DistanceElements getDistanceAccess() {
		return pDistance;
	}
	
	public ParserRule getDistanceRule() {
		return getDistanceAccess().getRule();
	}
	
	//Backward returns Backward:
	//    'Backward'
	//    '{'
	//        'distance' distance=Distance
	//    '}';
	public BackwardElements getBackwardAccess() {
		return pBackward;
	}
	
	public ParserRule getBackwardRule() {
		return getBackwardAccess().getRule();
	}
	
	//Left returns Left:
	//    'Left'
	//    '{'
	//        'distance' distance=Distance
	//    '}';
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//Right returns Right:
	//    'Right'
	//    '{'
	//        'distance' distance=Distance
	//    '}';
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//DistanceSensor returns DistanceSensor:
	//    'DistanceSensor'
	//    '{'
	//        'distance' distance=Distance
	//    '}';
	public DistanceSensorElements getDistanceSensorAccess() {
		return pDistanceSensor;
	}
	
	public ParserRule getDistanceSensorRule() {
		return getDistanceSensorAccess().getRule();
	}
	
	//TimeSensor returns TimeSensor:
	//    {TimeSensor}
	//    'TimeSensor'
	//    '{'
	//        ('CurrentMillis' CurrentMillis=EInt)?
	//    '}';
	public TimeSensorElements getTimeSensorAccess() {
		return pTimeSensor;
	}
	
	public ParserRule getTimeSensorRule() {
		return getTimeSensorAccess().getRule();
	}
	
	//Condition returns Condition:
	//    'Condition'
	//    '{'
	//        'Condition' Condition=BooleanExpression
	//        'then' then=Statement
	//        ('else' else=Statement)?
	//    '}';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Loop returns Loop:
	//    'Loop'
	//    '{'
	//        'Condition' Condition=BooleanExpression
	//        'statement' statement=Statement
	//    '}';
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//OR returns OR:
	//    {OR}
	//    'OR'
	//    ;
	public ORElements getORAccess() {
		return pOR;
	}
	
	public ParserRule getORRule() {
		return getORAccess().getRule();
	}
	
	//AND returns AND:
	//    {AND}
	//    'AND'
	//    ;
	public ANDElements getANDAccess() {
		return pAND;
	}
	
	public ParserRule getANDRule() {
		return getANDAccess().getRule();
	}
	
	//NOT returns NOT:
	//    {NOT}
	//    'NOT'
	//    ;
	public NOTElements getNOTAccess() {
		return pNOT;
	}
	
	public ParserRule getNOTRule() {
		return getNOTAccess().getRule();
	}
	
	//TRUE returns TRUE:
	//    {TRUE}
	//    'TRUE'
	//    ;
	public TRUEElements getTRUEAccess() {
		return pTRUE;
	}
	
	public ParserRule getTRUERule() {
		return getTRUEAccess().getRule();
	}
	
	//FALSE returns FALSE:
	//    {FALSE}
	//    'FALSE'
	//    ;
	public FALSEElements getFALSEAccess() {
		return pFALSE;
	}
	
	public ParserRule getFALSERule() {
		return getFALSEAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//VarIdentifier returns VarIdentifier:
	//    {VarIdentifier}
	//    'VarIdentifier'
	//    name=EString;
	public VarIdentifierElements getVarIdentifierAccess() {
		return pVarIdentifier;
	}
	
	public ParserRule getVarIdentifierRule() {
		return getVarIdentifierAccess().getRule();
	}
	
	//Cm returns Cm:
	//    {Cm}
	//    'Cm'
	//    ;
	public CmElements getCmAccess() {
		return pCm;
	}
	
	public ParserRule getCmRule() {
		return getCmAccess().getRule();
	}
	
	//Mm returns Mm:
	//    {Mm}
	//    'Mm'
	//    ;
	public MmElements getMmAccess() {
		return pMm;
	}
	
	public ParserRule getMmRule() {
		return getMmAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
